# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
       - master
  workflow_dispatch:
env:
  DEFAULT_NIX_CHANNEL: nixos-21.11
  # Allows you to run this workflow manually from the Actions tab
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: ${{ matrix.channel-branch }} 
    strategy: 
      matrix:
        channel-branch:
            - nixpkgs-unstable

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          ref: master
      - uses: cachix/install-nix-action@v15
        with:
          extra_nix_config: "system-features = nixos-test benchmark big-parallel kvm"
      - uses: cachix/cachix-action@v10
        with:
          name: '${{ env.CACHIX_CACHE }}'
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      # Runs a set of commands using the runners shell
      - name: Nix Version
        run: nix --version
      - name: Test Build
        run: |
          if [ "${{ matrix.channel-branch }}" = "master" ]; then
            export NIX_PATH=nixpkgs=channel:${{ env.DEFAULT_NIX_CHANNEL }}
          else
            export NIX_PATH=nixpkgs=channel:${{ matrix.channel-branch }}
          fi
          echo Building Linux release
          nix-shell shell.nix --command build_release --show-trace
          echo Building Windows release
          nix-shell cross-mingw-shell.nix --command build_release --show-trace
          echo Building Raspberrypi Static release
          nix-shell cross-raspberry-shell.nix --command build_release --show-trace
